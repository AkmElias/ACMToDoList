/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package exportimportframe;

import acmtodolist.AcmToDoList;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Formatter;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import problemdetails.FullProblem;
import problemdetails.ProblemDemo;

/**
 *
 * @author Kazi Nayeem
 */
public class ExportMainFrame extends javax.swing.JFrame {

    /**
     * Creates new form ExportMainFrame. initialize all components in this
     * Frame.
     */
    public ExportMainFrame() {
        super("Export Problems");

        initComponents();

        ButtonGroup group = new ButtonGroup();
        group.add(txtJRadioButton);
        group.add(csvJRadioButton);
        csvJRadioButton.setSelected(true);

        refeshExportTable();

        exportJTable.setAutoCreateRowSorter(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        exportJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        directoryJTextField = new javax.swing.JTextField();
        browseJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        fileNameJTextField = new javax.swing.JTextField();
        csvJRadioButton = new javax.swing.JRadioButton();
        txtJRadioButton = new javax.swing.JRadioButton();
        exportJButton = new javax.swing.JButton();
        removeJButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Problem List");

        exportJTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        exportJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Judge Name", "Problem ID", "Problem Name", "Mark"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(exportJTable);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Directory :");

        directoryJTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        browseJButton.setText("Browse");
        browseJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseJButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("File Name:");

        fileNameJTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        csvJRadioButton.setText("*.csv");

        txtJRadioButton.setText("*.txt");

        exportJButton.setText("Export");
        exportJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportJButtonActionPerformed(evt);
            }
        });

        removeJButton.setText("Remove");
        removeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(directoryJTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseJButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileNameJTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(csvJRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtJRadioButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(exportJButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(removeJButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeJButton)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(directoryJTextField)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(browseJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(csvJRadioButton)
                    .addComponent(txtJRadioButton))
                .addGap(6, 6, 6)
                .addComponent(exportJButton))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * directory selection button action perform. open a JFileChooser for
     * directory selection
     *
     * @param evt
     */
    private void browseJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseJButtonActionPerformed
        // TODO add your handling code here:

        JFileChooser choose = new JFileChooser();
        choose.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (choose.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File fi = choose.getSelectedFile();

            directoryJTextField.setText(fi.getAbsolutePath());

        }

    }//GEN-LAST:event_browseJButtonActionPerformed

    /**
     * remove marked problems from export list and update problem list
     *
     * @param evt
     */
    private void removeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeJButtonActionPerformed
        // TODO add your handling code here:
        ArrayList<ProblemDemo> allProb = AcmToDoList.Export_Problem;
        DefaultTableModel tableModel = (DefaultTableModel) exportJTable.getModel();

        for (int i = 0; i < tableModel.getRowCount(); i++) {
            if (tableModel.getValueAt(i, 3).equals(true)) {
                ProblemDemo now = new ProblemDemo(tableModel.getValueAt(i, 0).toString(), tableModel.getValueAt(i, 1).toString());
                for (int j = 0; j < allProb.size(); j++) {
                    if (allProb.get(j).isSameProblem(now)) {
                        allProb.remove(j);
                        break;
                    }
                }
            }
        }
        refeshExportTable();
    }//GEN-LAST:event_removeJButtonActionPerformed

    /**
     * export all problems that are in the list to specific file and format.
     * remove all problem from export list
     *
     * @param evt
     */
    private void exportJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportJButtonActionPerformed
        // TODO add your handling code here:

        File file = new File(directoryJTextField.getText());
        if (!(file.exists() && file.isDirectory())) {

            JOptionPane.showMessageDialog(this, "Invalid Directory", "", JOptionPane.ERROR_MESSAGE);

            return;
        }

        String path = directoryJTextField.getText() + "\\" + fileNameJTextField.getText();

        if (csvJRadioButton.isSelected()) {
            path = path + ".csv";
        } else {
            path = path + ".txt";
        }

        file = new File(path);

        if (file.exists()) {
            JOptionPane.showMessageDialog(this, "File already exists", "", JOptionPane.ERROR_MESSAGE);

            return;
        }

        ArrayList<ProblemDemo> allProb = AcmToDoList.Export_Problem;

        Formatter format = null;
        try {
            format = new Formatter(file);
            if (csvJRadioButton.isSelected()) {
                format.format("%s\n", "Problems");

                format.format("%s\n", "Judge,Problem ID,Problem Name,Level,No. Topic, Topics");
                format.flush();
                for (int i = 0; i < allProb.size(); i++) {
                    FullProblem now = allProb.get(i).getFullProblem();
                    format.format("%s\n", now.getExportProblemCSV());
                    format.flush();
                }
            } else {
                for (int i = 0; i < allProb.size(); i++) {
                    FullProblem now = allProb.get(i).getFullProblem();
                    format.format("%s\n", now.getExportProblemTXT());
                    format.flush();
                }
            }
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(ExportMainFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.err.println("file not found..... Export Frame");
        } finally {
            if (format != null) {
                format.close();
            }
        }
        allProb.clear();
        refeshExportTable();
    }//GEN-LAST:event_exportJButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExportMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExportMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExportMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExportMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExportMainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseJButton;
    private javax.swing.JRadioButton csvJRadioButton;
    private javax.swing.JTextField directoryJTextField;
    private javax.swing.JButton exportJButton;
    private javax.swing.JTable exportJTable;
    private javax.swing.JTextField fileNameJTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeJButton;
    private javax.swing.JRadioButton txtJRadioButton;
    // End of variables declaration//GEN-END:variables

    /**
     * update Export table list from export_problem list
     */
    public void refeshExportTable() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

        sameProblemFind();
        ArrayList<ProblemDemo> allProb = AcmToDoList.Export_Problem;
        DefaultTableModel tableModel = (DefaultTableModel) exportJTable.getModel();

        while (tableModel.getRowCount() > 0) {
            tableModel.removeRow(0);

        }

        allProb.stream().forEach((allProb1) -> {
            tableModel.addRow(allProb1.getSimpleProblem().getExImTableModel());
        });
    }

    /**
     * make export problem list unique problem set
     */
    private void sameProblemFind() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        ArrayList<ProblemDemo> allProb = AcmToDoList.Export_Problem;
        //DefaultTableModel tableModel = (DefaultTableModel) exportJTable.getModel();

        for (int i = 0; i < allProb.size(); i++) {
            for (int j = i + 1; j < allProb.size();) {
                if (allProb.get(i).isSameProblem(allProb.get(j))) {
                    allProb.remove(j);
                } else {
                    j++;
                }
            }
        }
    }
}
